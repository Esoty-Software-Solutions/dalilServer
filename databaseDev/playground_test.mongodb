// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('test');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.sales.drop();

// Insert a few documents into the sales collection.
// db.sales.insertMany([
//   { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
//   { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
//   { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
//   { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
//   { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
//   { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
//   { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
//   { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
// ]);

// Run a find command to view items sold on April 4th, 2014.
let doctorIdQP = "DOC-1"
let specialtyQP = "OBSTETRICS AND GYNECOLOGY"
let medicalCenterIdQP = "MC-2"
let cityQP = "Misurata"
let timeslotQP = ["morning", "evening"]
let fromDateQP = new Date ("2023-04-01")
let toDateQP = new Date ("2024-12-01")
let limitQP 
let limitDF = 30
let startAfterObjectQP = "DOC-1"


let query = {};
query['$and']=[];

 
let objectCount = 0;


if (query['$and'].length === 0) { 
    results = db.schedules.find({},
    // { scheduleId: 1, "doctor.doctorId": 1,"medicalcenter.medicalCenterId": 1, _id: 1 } 
    ).sort( {"_id": 1} );

    objectCount = results.count();
    
}else {
    results = db.schedules.find(query,
    // { scheduleId: 1, "doctor.doctorId": 1,"medicalcenter.medicalCenterId": 1, _id: 1 } 
    ).sort( { "_id": 1} );

    objectCount = results.count();
}



// test = results.sort( { "doctor.doctorId": -1, "_id": -1 } ).limit(1);
// a = results.sort( { "doctor.doctorId": 1 , "_id": 1} ).limit(4).toArray()[0];
// a["_id"] //63a8fa79a74309f7bdd37170

//  db.schedules.findOne({"_id": { $eq: "63a8fa79a74309f7bdd3732"}})
// results.sort( { "doctor.doctorId": 1 , "_id": 1} ).count();



// typeof results

// Object.keys(results)
// results.find({"doctor.doctorId": { $eq: doctorIdQP }});



// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
