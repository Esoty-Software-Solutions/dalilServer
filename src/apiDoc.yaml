openapi: 3.0.9
x-stoplight:
  id: v0r49t68fw391
info:
  title: Main Document
  version: '1.5'
  description: API for creating and updating information about accounts
  license:
    name: TBD
servers:
  - url: 'http://dalildev.esoty.ca/v1'
paths:
  /TestPushNotification:
    parameters: []
    post:
      tags:
        - devices
      summary: Test Push notification
      operationId: post-TestPushNotification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum:
                    - android
                    - ios
                    - browser
                payload:
                  type: object
                  properties:
                    title:
                      type: string
                      description: title of the notification
                    body:
                      type: string
                      description: body of the notification
                    clickAction:
                      type: string
                      description: action to be taken when the notification is clicked
                    iconURL:
                      type: string
                      description: icon to be displayed with the notification
                    data:
                      type: object
                      description: JSON data to be sent with the notification
              required:
                - title
                - body
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceToken:
                    type: string
                  deviceType:
                    type: string
                    enum:
                      - android
                      - ios
                      - browser
                  payload:
                    type: object
                    properties:
                      title:
                        type: string
                        description: title of the notification
                      body:
                        type: string
                        description: body of the notification
                      clickAction:
                        type: string
                        description: action to be taken when the notification is clicked
                      iconURL:
                        type: string
                        description: icon to be displayed with the notification
                      data:
                        type: object
                        description: JSON data to be sent with the notification
                required:
                  - title
                  - body
  /login:
    parameters: []
    post:
      tags:
        - users
      summary: login
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      token:
                        type: string
                      data:
                        $ref: '#/components/schemas/User'
                    required:
                      - token
                      - data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum:
                    - android
                    - ios
                    - browser
              required:
                - username
                - password
      description: user login
      parameters: []
  /users:
    get:
      summary: List all users
      tags:
        - users
      operationId: get-users
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                required:
                  - data
    post:
      summary: Create a new user
      tags:
        - users
      operationId: post-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
                    required:
                      - data
  '/users/{userId}/logout':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      tags:
        - users
      summary: logout
      operationId: post-logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
      description: user logout
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get user information
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
                    required:
                      - data
      operationId: get-users-userId
    patch:
      summary: update user information
      tags:
        - users
      operationId: patch-users-userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
                    required:
                      - data
  '/users/{userId}/deviceTokens':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      tags:
        - users
      summary: update device token for user
      description: update device token for user
      operationId: post-users-userId-deviceToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceToken:
                  type: string
                deviceType:
                  type: string
                  enum:
                    - android
                    - ios
                    - browser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
  '/users/{userId}/changePassword':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      operationId: post-users-userId-changePassword
      summary: change user password
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
  /subscribers:
    get:
      summary: List all subscribers
      tags:
        - subscribers
      operationId: get-subscribers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - schema:
            type: string
          in: query
          name: institutionId
          description: A string used to retrieve subscribers associated with the indicated institution by providing the institution  ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Subscriber_Read'
                required:
                  - data
    post:
      operationId: post-subscribers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber_Write'
        description: ''
      summary: Create a new subscriber
      tags:
        - subscribers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Subscriber_Read'
                    required:
                      - data
  '/subscribers/{subscriberId}':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
    get:
      operationId: get-subscribers-subscriberId
      description: Get information about the subscriber
      parameters: []
      summary: Get subscriber Information by ID
      tags:
        - subscribers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Subscriber_Read'
                    required:
                      - data
    patch:
      tags:
        - subscribers
      summary: ''
      operationId: patch-subscribers-subscriberId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber_Update'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Subscriber_Read'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
    get:
      summary: Get beneficiaries of a subscriber
      tags:
        - subscribers
        - beneficiaries
      operationId: get-subscribers-subscriberId-beneficiaries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Beneficiary'
                    required:
                      - data
    post:
      summary: Add a beneficiary for a subscriber
      description: ''
      tags:
        - subscribers
        - beneficiaries
      operationId: post-subscribers-subscriberId-beneficiaries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beneficiary'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Beneficiary'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get a beneficiary information
      tags:
        - subscribers
        - beneficiaries
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Beneficiary'
                    required:
                      - data
    patch:
      summary: update a beneficiary information
      description: ''
      tags:
        - subscribers
        - beneficiaries
      operationId: post-subscribers-subscriberId-beneficiaries-beneficiaryId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beneficiary'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Beneficiary'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get medical file for beneficiary
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalFile'
                    required:
                      - data
    patch:
      tags:
        - medicalFiles
      summary: ''
      operationId: patch-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalFile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalFile'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/clinicalVisits':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get clinicalVisits of medical file
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-clinicalVisits
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/ClinicalVisit'
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-clinicalVisits
      summary: Create clinicalVisit document for medical file
      tags:
        - medicalFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/ClinicalVisit'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ClinicalVisit'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/allergies':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get allergies of medical file
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-allergies
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Allergy'
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-allergies
      summary: Create allergy document for medical file
      tags:
        - medicalFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Allergy'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Allergy'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/surgeryHistories':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get surgeryHistories of medical file
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-surgeryHistories
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/SurgeryHistory'
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-surgeryHistories
      summary: Create surgeryHistory document for medical file
      tags:
        - medicalFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/SurgeryHistory'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SurgeryHistory'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/chronicDiseases':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get chronicDiseases of medical file
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-chronicDiseases
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/ChronicDisease'
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-chronicDiseases
      summary: Create chronicDisease document for medical file
      tags:
        - medicalFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/ChronicDisease'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ChronicDisease'
                    required:
                      - data
  '/subscribers/{subscriberId}/beneficiaries/{beneficiaryId}/medicalFiles/medicalTests':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
      - schema:
          type: string
        name: beneficiaryId
        in: path
        required: true
    get:
      summary: Get medicalTests of medical file
      tags:
        - medicalFiles
      operationId: get-subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-medicalTests
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/MedicalTest'
                    required:
                      - data
    post:
      operationId: post--subscribers-subscriberId-beneficiaries-beneficiaryId-medicalFiles-medicalTests
      summary: Create medicalTest document for medical file
      tags:
        - medicalFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/MedicalTest'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalTest'
                    required:
                      - data
  /appointments:
    get:
      summary: List all appointments
      tags:
        - bookings
      operationId: get-appointments
      parameters:
        - $ref: '#/components/parameters/appointmentStatusId'
        - $ref: '#/components/parameters/dateRange'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/cityId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      objectArray:
                        type: array
                        items:
                          $ref: '#/components/schemas/Appointment_Read'
                required:
                  - statusCode
                  - message
                  - data
  '/appointments/{appointmentId}':
    parameters:
      - schema:
          type: string
        name: appointmentId
        in: path
        required: true
    get:
      summary: get an appointment
      tags:
        - bookings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Appointment_Read'
                required:
                  - statusCode
                  - message
                  - data
    patch:
      summary: update an appointment status
      tags:
        - bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment_Update'
        description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Appointment_Read'
                required:
                  - statusCode
                  - message
                  - data
      operationId: patch-appointments-appointmentId
      description: ''
  '/subscribers/{subscriberId}/appointments':
    parameters:
      - schema:
          type: string
        name: subscriberId
        in: path
        required: true
    post:
      tags:
        - bookings
      summary: request an appointment
      operationId: post-subscribers-subscriberId-appointments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment_Write'
        description: ''
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Appointment_Write'
                required:
                  - codeStatus
                  - message
                  - data
    get:
      tags:
        - bookings
      summary: List all appointments for user
      operationId: get-subscribers-subscriberId-appointments
      parameters:
        - $ref: '#/components/parameters/appointmentStatusId'
        - $ref: '#/components/parameters/dateRange'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Appointment_Read'
  /medicalCenters:
    get:
      summary: List medical
      tags:
        - medicalCenters
      operationId: get-medicalCenters
      description: ''
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/MedicalCenter'
    post:
      tags:
        - medicalCenters
      summary: create a medical center
      operationId: post-medicalCenters
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/MedicalCenter'
                - type: object
                  properties:
                    file:
                      type: array
                      items:
                        type: string
                        format: binary
                      maxItems: 4
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalCenter'
                    required:
                      - data
  '/medicalCenters/{medicalCenterId}':
    parameters:
      - schema:
          type: string
        name: medicalCenterId
        in: path
        required: true
    get:
      tags:
        - medicalCenters
      summary: Get medical center
      operationId: get-medicalCenters-medicalCenterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalCenter'
                    required:
                      - data
    patch:
      tags:
        - medicalCenters
      summary: Get medical center object
      operationId: patch-medicalCenters-medicalCenterId
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MedicalCenter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalCenter'
                    required:
                      - data
    delete:
      tags:
        - medicalCenters
      summary: ''
      operationId: delete-medicalCenters-medicalCenterId
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MedicalCenter'
                    required:
                      - data
  /schedules:
    get:
      summary: List schedules
      tags:
        - bookings
      operationId: get-schedules
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/timeSlotId'
        - $ref: '#/components/parameters/dateRange'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/groupBy'
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  codeStatus:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    required:
                      - objectCount
                      - hasMore
                      - objectArray
                    properties:
                      objectCount:
                        type: integer
                      objectArray:
                        type: array
                        description: Different response based on the sortBy and groupBy query parameters
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/Schedule_Read'
                            - $ref: '#/components/schemas/ScheduleMedicalCenter'
                            - $ref: '#/components/schemas/ScheduleDoctor'
    post:
      tags:
        - bookings
      summary: Create a new schedule
      operationId: post-schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule_Write'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule_Read'
  '/schedules/{scheduleId}':
    parameters:
      - schema:
          type: string
        name: scheduleId
        in: path
        required: true
    patch:
      tags:
        - bookings
      summary: Update schedule
      operationId: patch-schedules-scheduleId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule_Write'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Schedule_Read'
                    required:
                      - data
    get:
      summary: Get schedule by ID
      tags:
        - bookings
      operationId: get-schedules-scheduleId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Schedule_Read'
                    required:
                      - data
    delete:
      summary: Delete schedule
      tags:
        - bookings
      operationId: delete-schedules-scheduleId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
  /doctors:
    post:
      summary: Create a new doctor
      tags:
        - doctors
      operationId: post-doctors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Doctor'
                    required:
                      - data
    get:
      summary: List doctors
      tags:
        - doctors
      operationId: get-doctors
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
      description: 'Specifying medicalCenterId, medicalSpecialtyId, or cityId will return doctors with schedules associated with those parameters.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
                  objectCount:
                    type: integer
                required:
                  - object
                  - objectCount
                  - hasMore
  '/doctors/{doctorId}':
    parameters:
      - schema:
          type: string
        name: doctorId
        in: path
        required: true
    get:
      summary: Get doctor by ID
      tags:
        - doctors
      operationId: get-doctors-doctorId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Doctor'
                    required:
                      - data
    patch:
      tags:
        - doctors
      summary: ''
      operationId: patch-doctors-doctorId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Doctor'
                    required:
                      - data
    delete:
      tags:
        - doctors
      summary: ''
      operationId: delete-doctors-doctorId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
  /misc/cities:
    get:
      summary: List cities
      tags:
        - miscellaneous
      operationId: get-cities
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a city
      operationId: post-cities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/cities/{cityId}':
    parameters:
      - schema:
          type: string
        name: cityId
        in: path
        required: true
    get:
      summary: get a city
      tags:
        - miscellaneous
      operationId: get-cities-cityId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: update a city
      operationId: patch-cities-cityId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/medicalSpecialties:
    get:
      summary: List medicalSpecialties
      tags:
        - miscellaneous
      operationId: get-medicalSpecialties
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
        - $ref: '#/components/parameters/medicalSpecialtyId'
        - $ref: '#/components/parameters/medicalCenterId'
        - $ref: '#/components/parameters/doctorId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a medicalSpecialty
      operationId: post-medicalSpecialties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/medicalSpecialties/{medicalSpecialtyId}':
    parameters:
      - schema:
          type: string
        name: medicalSpecialtyId
        in: path
        required: true
    get:
      summary: get a medicalSpecialty
      tags:
        - miscellaneous
      operationId: get-medicalSpecialties-medicalSpecialtyId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: update a medical specialty
      operationId: patch-medicalSpecialties-medicalSpecialtyId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/medicalServices:
    get:
      summary: List medicalServices
      tags:
        - miscellaneous
      operationId: get-medicalServices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a medicalService
      operationId: post-medicalServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/medicalServices/{medicalServiceId}':
    parameters:
      - schema:
          type: string
        name: medicalServiceId
        in: path
        required: true
    get:
      summary: Get a medicalService
      tags:
        - miscellaneous
      operationId: get-medicalServices-medicalServiceId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: update a medicalService
      operationId: patch-medicalServices-medicalServiceId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/genderEnum:
    get:
      summary: List genderEnums
      tags:
        - miscellaneous
      operationId: get-genderEnum
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a genderEnum
      operationId: post-genderEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/genderEnum/{genderEnumId}':
    parameters:
      - schema:
          type: string
        name: genderEnumId
        in: path
        required: true
    get:
      summary: get a genderEnum
      tags:
        - miscellaneous
      operationId: get-genderEnum-genderEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: Update a genderEnum
      operationId: patch-genderEnum-genderEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/appointmentStatusEnum:
    get:
      summary: List appointmentStatusEnums
      tags:
        - miscellaneous
      operationId: get-appointmentStatusEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a appointmentStatusEnum
      operationId: post-appointmentStatusEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/appointmentStatusEnum/{appointmentStatusEnumId}':
    parameters:
      - schema:
          type: string
        name: appointmentStatusEnumId
        in: path
        required: true
    get:
      summary: get a appointmentStatusEnum
      tags:
        - miscellaneous
      operationId: get-appointmentStatusEnum-appointmentStatusEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: Update a appointmentStatusEnum
      operationId: patch-appointmentStatusEnum-appointmentStatusEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/timeSlotEnum:
    get:
      summary: List timeSlotEnums
      tags:
        - miscellaneous
      operationId: get-timeSlotEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a timeSlotEnum
      operationId: post-timeSlotEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/timeSlotEnum/{timeSlotEnumId}':
    parameters:
      - schema:
          type: string
        name: timeSlotEnumId
        in: path
        required: true
    get:
      summary: Get a timeSlotEnum
      tags:
        - miscellaneous
      operationId: get-timeSlotEnum-timeSlotEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: Update a timeSlotEnum
      operationId: patch-timeSlotEnum-timeSlotEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/relationshipToSubscriberEnum:
    get:
      summary: List relationshipToSubscriberEnums
      tags:
        - miscellaneous
      operationId: get-relationshipToSubscriberEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a relationshipToSubscriberEnum
      operationId: post-relationshipToSubscriberEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/relationshipToSubscriberEnum/{relationshipToSubscriberEnumId}':
    parameters:
      - schema:
          type: string
        name: relationshipToSubscriberEnumId
        in: path
        required: true
    get:
      summary: Get a relationshipToSubscriberEnum
      tags:
        - miscellaneous
      operationId: get-relationshipToSubscriberEnum-relationshipToSubscriberEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: Update a relationshipToSubscriberEnum
      operationId: patch-relationshipToSubscriberEnum-relationshipToSubscriberEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /misc/accountStatusEnum:
    get:
      summary: List accountStatusEnum
      tags:
        - miscellaneous
      operationId: get-accountStatusEnums
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/EnumList'
    post:
      tags:
        - miscellaneous
      summary: Add a accountStatusEnum
      operationId: post-accountStatusEnums
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  '/misc/accountStatusEnum/{accountStatusEnumId}':
    parameters:
      - schema:
          type: string
        name: accountStatusEnumId
        in: path
        required: true
    get:
      summary: Get a accountStatusEnum
      tags:
        - miscellaneous
      operationId: get-accountStatusEnum-accountStatusEnumId
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
    patch:
      tags:
        - miscellaneous
      summary: Update a accountStatusEnum
      operationId: patch-accountStatusEnum-accountStatusEnumId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumList'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EnumList'
                    required:
                      - data
  /institutions:
    get:
      summary: Get all institutions
      tags:
        - institutions
      operationId: get-institutions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Institution'
    post:
      summary: Create an institution
      tags:
        - institutions
      operationId: post-institutions
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Institution'
                - type: object
                  properties:
                    file:
                      type: array
                      items:
                        type: string
                        format: binary
                      maxItems: 4
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Institution'
  '/institutions/{institutionId}':
    parameters:
      - schema:
          type: string
        name: institutionId
        in: path
        required: true
    get:
      tags:
        - institutions
      summary: ''
      operationId: get-institutions-institutionId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Institution'
    patch:
      summary: Update a institution
      tags:
        - institutions
      operationId: patch-institutions-institutionId
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Institution'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Institution'
  /pharmacies:
    get:
      summary: Get all pharmacies
      tags:
        - pharmacies
      operationId: get-pharmacies
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/cityId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Pharmacy'
    post:
      tags:
        - pharmacies
      summary: create a pharmacy
      operationId: post-pharmacies
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Pharmacy'
                - type: object
                  properties:
                    file:
                      type: array
                      items:
                        type: string
                        format: binary
                      maxItems: 4
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Pharmacy'
  '/pharmacies/{pharmacyId}':
    parameters:
      - schema:
          type: string
        name: pharmacyId
        in: path
        required: true
    get:
      summary: Get a pharmacy
      tags:
        - pharmacies
      operationId: get-pharmacies-pharmacyId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Pharmacy'
    patch:
      summary: Update a pharmacy
      tags:
        - pharmacies
      operationId: patch-pharmacies-pharmacyId
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Pharmacy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Pharmacy'
    delete:
      summary: Delete a pharmacy
      tags:
        - pharmacies
      operationId: delete-pharmacies-pharmacyId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Pharmacy'
  /prescriptions:
    get:
      summary: Get all prescriptions
      tags:
        - prescriptions
      operationId: get-prescriptions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/pharmacyId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/Prescription'
    post:
      summary: Create a prescription
      tags:
        - prescriptions
      operationId: post-prescriptions
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Prescription'
                - type: object
                  properties:
                    file:
                      type: array
                      items:
                        type: string
                        format: binary
                      maxItems: 1
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Prescription'
  '/prescriptions/{prescriptionId}':
    parameters:
      - schema:
          type: string
        name: prescriptionId
        in: path
        required: true
    get:
      tags:
        - prescriptions
      summary: ''
      operationId: get-prescriptions-prescriptionId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Prescription'
    patch:
      summary: Update a prescription
      tags:
        - prescriptions
      operationId: patch-prescriptions-prescriptionId
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/Prescription'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Prescription'
  '/prescriptions/{prescriptionId}/prescriptionQuotes':
    parameters:
      - schema:
          type: string
        name: prescriptionId
        in: path
        required: true
    get:
      summary: Get all prescriptions quotes for a prescription
      tags:
        - prescriptions
      operationId: get-prescriptions-prescriptionQuotes
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/starting_after_object'
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/pharmacyId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        required:
                          - objectCount
                          - objectArray
                        properties:
                          objectCount:
                            type: integer
                          objectArray:
                            type: array
                            items:
                              $ref: '#/components/schemas/PrescriptionQuote'
    post:
      summary: Create a prescription quote for a prescription
      tags:
        - prescriptions
      operationId: post-prescriptions-prescriptionQuotes
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PrescriptionQuote'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PrescriptionQuote'
  /sms:
    get:
      tags:
        - sms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      objectArray:
                        type: array
                        items:
                          $ref: '#/components/schemas/Sms_Read'
    post:
      tags:
        - sms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sms_Write'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sms_Read'
  '/sms/{smsId}':
    parameters:
      - schema:
          type: string
        name: smsId
        in: path
        required: true
    get:
      tags:
        - sms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sms_Read'
    patch:
      tags:
        - sms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sms_Update'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sms_Read'
components:
  schemas:
    Allergy:
      title: allergy
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        medicalFileId:
          type: string
          readOnly: true
        title:
          type: string
        notes:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - title
        - _id
        - thumbnailLink
        - fileLink
    Appointment_Read:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        appointmentDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        appointmentStatus:
          type: object
          readOnly: true
        appointmentStatusId:
          type: string
          format: uuid
          writeOnly: true
        timeSlot:
          type: object
          readOnly: true
        timeSlotId:
          type: string
          format: uuid
          writeOnly: true
        beneficiary:
          readOnly: true
          $ref: '#/components/schemas/Beneficiary'
          description: 'readyOnly, do not send in the request body'
        schedule:
          $ref: '#/components/schemas/Schedule_Read'
          description: 'readyOnly, do not send in the request body'
          readOnly: true
      required:
        - _id
        - appointmentDate
        - appointmentStatus
        - appointmentStatusId
        - timeSlot
        - timeSlotId
        - beneficiary
        - schedule
    Appointment_Update:
      type: object
      properties:
        _id:
          type: string
        appointmentStatus:
          type: object
          readOnly: true
        appointmentStatusId:
          type: string
          format: uuid
          writeOnly: true
        timeSlot:
          type: object
          readOnly: true
        timeSlotId:
          type: string
          format: uuid
          writeOnly: true
        appointmentDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
      required:
        - _id
        - appointmentStatus
        - appointmentStatusId
    Appointment_Write:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        scheduleId:
          type: string
          writeOnly: true
        beneficiaryId:
          type: string
          writeOnly: true
        appointmentDate:
          type: string
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        appointmentStatus:
          type: object
          readOnly: true
        appointmentStatusId:
          type: string
          format: uuid
          writeOnly: true
        timeSlot:
          type: object
          readOnly: true
        timeSlotId:
          type: string
          format: uuid
          writeOnly: true
      required:
        - _id
        - scheduleId
        - appointmentDate
        - appointmentStatus
        - appointmentStatusId
        - timeSlot
        - timeSlotId
        - beneficiaryId
    Beneficiary:
      title: beneficiary
      x-tags:
        - subscriber
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        firstName:
          type: string
        secondName:
          type: string
        thirdName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        relationshipToSubscriber:
          type: object
          readOnly: true
        relationshipToSubscriberId:
          type: string
          format: uuid
          writeOnly: true
        gender:
          type: object
          readOnly: true
        genderId:
          type: string
          format: uuid
          writeOnly: true
        medicalFileId:
          type: string
          nullable: true
          readOnly: true
          description: if there is no medicalFileId "null" would be returned
      required:
        - _id
        - firstName
        - secondName
        - lastName
        - birthdate
        - relationshipToSubscriber
        - relationshipToSubscriberId
        - medicalFileId
        - gender
        - genderId
    ChangePassword:
      title: changePassword
      type: object
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - currentPassword
        - newPassword
    ChronicDisease:
      title: chronicDiseases
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        medicalFileId:
          type: string
          readOnly: true
        title:
          type: string
        diagnosisDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
          nullable: true
        doctorName:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - title
        - _id
    ClinicalVisit:
      title: clinicalVisits
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        visitType:
          type: string
          nullable: true
        visitDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
          nullable: true
        centerName:
          type: string
        doctorName:
          type: string
        notes:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - _id
        - centerName
        - doctorName
        - notes
    Doctor:
      title: doctor
      x-tags:
        - doctor
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        firstName:
          type: string
        secondName:
          type: string
        lastName:
          type: string
        specialty:
          type: object
          readOnly: true
        specialtyId:
          type: string
          format: uuid
          writeOnly: true
        level:
          type: string
        gender:
          type: string
        birthdate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
      required:
        - _id
        - firstName
        - secondName
        - lastName
        - specialty
        - specialtyId
        - level
        - gender
    EnumList:
      title: enumList
      x-tags:
        - miscellaneous
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          description: id to use in API when Id is needed
        backendName:
          type: string
          description: name to use in API when a word is needed
        arabicName:
          type: string
          description: Arabic name to display in the UI
        englishName:
          type: string
          description: English name to display in the UI
      required:
        - _id
        - backendName
        - arabicName
        - englishName
    Institution:
      title: institutions
      x-stoplight:
        id: sz7ni98s7hkhl
      x-tags:
        - institutions
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        phoneNumber:
          type: string
        city:
          type: object
          readOnly: true
        cityId:
          type: string
          writeOnly: true
        employeeCount:
          type: integer
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        subscriberCount:
          type: string
          readOnly: true
        benefitPolicy:
          $ref: '#/components/schemas/InsurancePolicy'
      required:
        - _id
        - name
        - subscriberCount
        - city
        - cityId
        - phoneNumber
    InsurancePolicy:
      title: insurancePolicy
      x-tags:
        - institutions
      type: object
      properties:
        insuranceType:
          type: string
        insuranceIssuer:
          type: string
        balanceResetDate:
          type: string
          format: MM-DD
        policyExpirationDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        inPatientAggregateLimit:
          type: number
          format: float
        inPatientServices:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
              limit:
                type: number
                format: float
            required:
              - service
              - limit
        outPatientAggregateLimit:
          type: number
          format: float
        outPatientServices:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
              limit:
                type: string
            required:
              - service
              - limit
      required:
        - insuranceType
        - insuranceIssuer
        - balanceResetDate
        - policyExpirationDate
        - inPatientAggregateLimit
        - inPatientServices
        - outPatientAggregateLimit
        - outPatientServices
    MedicalCenter:
      title: medicalCenter
      x-tags:
        - medicalCenter
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        city:
          type: object
          readOnly: true
        cityId:
          type: string
          writeOnly: true
        description:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        phoneNumber:
          type: array
          items:
            type: string
          minItems: 1
        email:
          type: string
          format: email
          nullable: true
        facebookLink:
          type: string
          nullable: true
        googleMapLink:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: array
          items:
            type: string
          minItems: 1
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - _id
        - name
        - city
        - cityId
        - phoneNumber
        - thumbnailLink
        - fileLink
    MedicalFile:
      title: medicalFile
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        beneficiaryId:
          type: string
          readOnly: true
        weight:
          type: string
          nullable: true
          description: Unit is in kg
        bloodType:
          type: string
          nullable: true
        height:
          type: string
          nullable: true
          description: Unit is in cm
      required:
        - _id
        - birthDate
        - gender
        - weight
    MedicalTest:
      title: medicalTest
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        title:
          type: string
        centerName:
          type: string
          nullable: true
        city:
          type: object
          readOnly: true
          nullable: true
        cityId:
          type: string
          writeOnly: true
          nullable: true
        reportDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
          nullable: true
        notes:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - title
    Pharmacy:
      title: pharmacy
      x-tags:
        - pharmacy
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        city:
          type: object
          readOnly: true
        cityId:
          type: string
          writeOnly: true
        description:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        phoneNumber:
          type: array
          items:
            type: string
          minItems: 1
        email:
          type: string
          format: email
          nullable: true
        facebookLink:
          type: string
          nullable: true
        googleMapLink:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: array
          items:
            type: string
          minItems: 1
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - _id
        - name
        - city
        - cityId
        - phoneNumber
        - thumbnailLink
        - fileLink
    Prescription:
      title: prescription
      x-tags:
        - prescription
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        subscriberId:
          type: string
          format: uuid
        title:
          type: string
        notes:
          type: string
          nullable: true
        thumbnailLink:
          type: string
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          readOnly: true
          description: if there is no file "null" would be returned
        Quotes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PrescriptionQuote'
        isActive:
          type: boolean
          description: if the prescription post is active or not
      required:
        - title
        - _id
        - thumbnailLink
        - fileLink
        - subscriberId
    PrescriptionQuote:
      title: prescription Quote
      x-tags:
        - prescriptionQuote
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        pharmacyId:
          type: string
          format: uuid
        prescriptionId:
          type: string
          format: uuid
        notes:
          type: string
          nullable: true
        totalPrice:
          type: number
        table:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
          minItems: 1
      required:
        - title
        - _id
        - thumbnailLink
        - fileLink
        - pharmacyId
    Schedule_Read:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        medicalCenter:
          $ref: '#/components/schemas/MedicalCenter'
        doctor:
          $ref: '#/components/schemas/Doctor'
        timeSlot:
          type: object
          readOnly: true
        timeSlotId:
          type: string
          format: uuid
          writeOnly: true
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        price:
          type: integer
        startDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        endDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        isActive:
          type: boolean
      required:
        - _id
        - medicalCenter
        - doctor
        - timeSlot
        - timeSlotId
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
        - price
        - startDate
        - endDate
        - isActive
    Schedule_Write:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        medicalCenterId:
          type: string
          writeOnly: true
        doctorId:
          type: string
          writeOnly: true
        timeSlot:
          type: object
          readOnly: true
        timeSlotId:
          type: string
          format: uuid
          writeOnly: true
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        price:
          type: number
        startDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        endDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        isActive:
          type: boolean
          readOnly: true
      description: 'When creating a new schedule, at least one day of the week should be true.'
      required:
        - _id
        - medicalCenterId
        - doctorId
        - timeSlot
        - timeSlotId
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
        - price
        - startDate
        - endDate
    ScheduleDoctor:
      title: schedule grouped by doctor
      type: object
      properties:
        doctor:
          $ref: '#/components/schemas/Doctor'
        scheduleCount:
          type: integer
          description: number of schedules associated with this doctor
        scheduleList:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_Read'
    ScheduleMedicalCenter:
      title: schedule grouped by medicalCenter
      type: object
      properties:
        medicalCenter:
          $ref: '#/components/schemas/MedicalCenter'
        scheduleCount:
          type: integer
          description: number of schedules under this medicalCenter
        scheduleList:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_Read'
    Sms_Read:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        messageStatus:
          type: string
          enum:
            - pending
            - sent
        phoneNumber:
          type: string
        messageContent:
          type: string
      required:
        - _id
        - messageStatus
        - phoneNumber
        - messageContent
    Sms_Update:
      type: object
      properties:
        messageStatus:
          type: string
          enum:
            - pending
            - sent
      required:
        - messageContent
    Sms_Write:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        messageStatus:
          type: string
          enum:
            - pending
            - sent
          readOnly: true
        phoneNumber:
          type: string
        messageContent:
          type: string
      required:
        - _id
        - messageStatus
        - phoneNumber
        - messageContent
    StandardResponse:
      title: standardResponse
      type: object
      properties:
        statusCode:
          type: string
        message:
          type: string
      required:
        - statusCode
        - message
    Subscriber_Read:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        firstName:
          type: string
        secondName:
          type: string
        thirdName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
        phoneNumber:
          type: string
        gender:
          type: string
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
        institutionId:
          type: string
        city:
          type: object
          readOnly: true
          nullable: true
        cityId:
          type: string
          writeOnly: true
          nullable: true
      required:
        - _id
        - firstName
        - secondName
        - lastName
        - phoneNumber
        - gender
        - beneficiaries
        - account
    Subscriber_Update:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        firstName:
          type: string
        secondName:
          type: string
        thirdName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
        phoneNumber:
          type: string
        gender:
          type: string
        institutionId:
          type: string
        city:
          type: object
          readOnly: true
          nullable: true
        cityId:
          type: string
          writeOnly: true
          nullable: true
      required:
        - _id
        - firstName
        - secondName
        - lastName
        - phoneNumber
        - gender
        - beneficiaries
        - account
    Subscriber_Write:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        firstName:
          type: string
        secondName:
          type: string
        thirdName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
        phoneNumber:
          type: string
        gender:
          type: string
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
        institutionId:
          type: string
        city:
          type: object
          readOnly: true
          nullable: true
        cityId:
          type: string
          writeOnly: true
          nullable: true
      required:
        - _id
        - firstName
        - secondName
        - lastName
        - phoneNumber
        - gender
        - beneficiaries
        - account
    SurgeryHistory:
      title: surgeryHistory
      x-tags:
        - medicalFile
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        medicalFileId:
          type: string
          readOnly: true
        title:
          type: string
        surgeryDate:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        doctorName:
          type: string
        centerName:
          type: string
        notes:
          type: string
        thumbnailLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
        fileLink:
          type: string
          nullable: true
          readOnly: true
          description: if there is no file "null" would be returned
      required:
        - _id
        - title
    User:
      title: user
      x-stoplight:
        id: m4si2pk0h07zi
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        username:
          type: string
        password:
          type: string
          format: password
          writeOnly: true
          description: Optional. Used only when creating a new user
        firstName:
          type: string
        secondName:
          type: string
        thirdName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        phoneAuthenticated:
          type: boolean
          readOnly: true
        resetPassword:
          type: boolean
          readOnly: true
        subscriberId:
          type: string
          nullable: true
          description: if there is no subscriberId
        doctorId:
          type: string
          nullable: true
          description: if there is no doctorId
        institutionId:
          type: string
          nullable: true
          description: if there is no institutionId
        pharmacyId:
          type: string
          nullable: true
          description: if there is no pharmacyId
        laboratoryId:
          type: string
          nullable: true
          description: if there is no laboratoryId
        ImagingCenterId:
          type: string
          nullable: true
          description: if there is no ImagingCenterId
        auxiliaryCenterId:
          type: string
          nullable: true
          description: if there is no auxiliaryCenterId
      required:
        - _id
        - username
        - resetPassword
        - firstName
        - lastName
        - phoneNumber
  examples: {}
  responses: {}
  securitySchemes:
    'Authorization: Basic ZGVtbzpwQDU1dzByZA==':
      type: http
      scheme: basic
      description: ''
  requestBodies: {}
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
      description: 'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 30'
    starting_after_object:
      name: starting_after_object
      in: query
      required: false
      schema:
        type: string
      description: 'A cursor for use in pagination. starting_after_object is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after_object in order to fetch the next page of the list.'
      deprecated: true
    skip:
      name: skip
      in: query
      required: false
      schema:
        type: integer
      description: Skip a number of objects. Used for pagination
    doctorId:
      name: doctorId
      in: query
      required: false
      schema:
        type: string
      description: doctor ID
    medicalCenterId:
      name: medicalCenterId
      in: query
      required: false
      schema:
        type: string
      description: medical center ID
    pharmacyId:
      name: pharmacyId
      in: query
      required: false
      schema:
        type: string
      description: pharmacy ID
    timeSlotId:
      name: timeSlotId
      in: query
      required: false
      style: form
      explode: true
      description: List of timeSlots to filter by
      schema:
        type: array
        items:
          type: string
      example:
        - afdsa34
        - jklj3432
        - j32432l
    appointmentStatusId:
      name: appointmentStatusId
      in: query
      required: false
      style: form
      explode: true
      description: List of appointment statuses to filter by
      schema:
        type: array
        items:
          type: string
      example:
        - afdsa34
        - jklj3432
        - j32432l
    dateRange:
      name: dateRange
      in: query
      required: false
      style: form
      explode: true
      description: 'Date range filter (start_date,end_date)'
      schema:
        type: array
        items:
          type: string
          format: date
          pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
          example: '2019-05-17'
        maxItems: 2
      example:
        - '2022-12-22'
        - '2023-03-01'
    fromDate:
      name: fromDate
      in: query
      required: false
      schema:
        type: string
        format: date
        pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
        example: '2019-05-17'
      description: retrieve objects associated with a date on or after this date
      deprecated: true
    toDate:
      name: toDate
      in: query
      schema:
        type: string
        format: date
        pattern: '/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/'
        example: '2019-05-17'
      description: Retrieve objects associated with a date on or before this date
      deprecated: true
    sortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: 'Flag to sort the objects by either doctor, medical centers or objectId. Default will be to sort by object id'
    groupBy:
      name: groupBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - doctor
          - medicalCenter
      description: Flag to group the objects by either doctor or medical centers
    medicalSpecialtyId:
      name: medicalSpecialtyId
      in: query
      required: false
      schema:
        type: string
      description: filter for doctor's specialty
    institutionId:
      name: institutionId
      in: query
      required: false
      schema:
        type: string
      description: institution Id
    cityId:
      name: cityId
      in: query
      required: false
      schema:
        type: string
      description: filter parameter to indicated city
    searchQuery:
      name: searchQuery
      in: query
      required: false
      schema:
        type: string
      description: filter string parameters like name and ID
